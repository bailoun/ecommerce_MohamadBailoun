services:
  customers-service:
    build:
      context: .
      dockerfile: customers/Dockerfile
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce_network
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ecommerce_db
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}

  inventory-service:
    build:
      context: .
      dockerfile: inventory/Dockerfile
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce_network
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ecommerce_db
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}

  reviews-service:
    build:
      context: .
      dockerfile: reviews/Dockerfile
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce_network
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ecommerce_db
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}

  sales-service:
    build:
      context: .
      dockerfile: sales/Dockerfile
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce_network
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ecommerce_db
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ecommerce_db
    ports:
      - "5432:5432"
    networks:
      - ecommerce_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ecommerce_db" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

networks:
  ecommerce_network:
    driver: bridge
